{
  "correct": ["Super! Du hast die Aufgabe richtig gelöst!"],
  "noCorrection1digit": ["Wir rechnen ", " und das ergibt "], // 1 digit simple case
  "noCorrectionMoredigits": [
    "Wir fangen bei den ",
    "an und rechnen ",
    "Jetzt rechnen wir die ", // returnStringNoCorrection
    "stelle mit " // returnStringNoCorrection
  ],
  "withCorrectionEinerstelleFalse": [
    "Wir fangen bei der Einerspalte ganz rechts an. Wir können nicht einfach ",
    " rechnen, da ", // returnStringStartEinerstelle
    " kleiner als ", // returnStringStartEinerstelle
    " ist.", // returnStringStartEinerstelle
    "Wir müssen uns 10 von der ", //returnStringCorrectionStep
    "spalte leihen. Wir ziehen 1 von den ", // returnStringCorrectionStep
    " ab, also ", // returnStringCorrectionStep
    " - 1 = ", // returnStringCorrectionStep
    ", und erhalten dafür 10 ", // returnStringCorrectionStep
    ", also ", // returnStringCorrectionStep
    " + 10 = " // returnStringCorrectionStep
  ],
  "withCorrectionAbZehnerFalse": [
    "Wir fangen bei den ", // returnStringStartEinerstelleWithoutCorrection
    " an und rechnen ", // returnStringStartEinerstelleWithoutCorrection
    "Weiter geht es in der ", // returnStringZehnerstelle
    "zeile. Wir können nicht einfach ", // returnStringZehnerstelle
    " rechnen, da ", // returnStringZehnerstelle
    " kleiner als ", // returnStringZehnerstelle
    " ist.", // returnStringZehnerstelle
    "Wir müssen uns 10 von der ",
    "spalte leihen. Wir ziehen 1 von den ",
    " ab, also ",
    " - 1 = ",
    ", und erhalten dafür 10",
    " also ",
    " + 10 = "
  ],
  "analogy": [
    "Oh nein, es sieht so aus als sei dir ein Fehler passiert. Wenn du ihn selbst gefunden hast, korrigiere deine Eingabe.",
    "Ich zeige dir, wie ich eine ähnliche Aufgabe löse.", // 2 general cases
    "Tadaaa! Wir haben unser Ergebnis. Probiere es gleich nochmal mit deiner Aufgabe." // final
  ],
  "digits": ["Einer", "Zehner", "Hunderter"],
  "digits_with_n": ["Einern", "Zehnern", "Hundertern"],
  "special_case_3": [
    "Wir müssen uns 10 Einer von den Zehnern leihen. Huch, bei den Zehnern steht eine 0! Wir können uns noch nichts leihen."
  ],
  "special_case_4": [
    "Also müssen wir uns erst noch 10 Zehner von den Hundertern leihen. Dafür rechnen wir ",
    " - 1 = ",
    ". Jetzt haben wir 10 Zehner und können aus der 0 bei den Zehnern eine 10 machen."
  ],
  "special_case_5": [
    "Zurück bei den Einern: Jetzt können wir uns einen Zehner leihen. Wir rechnen 10 - 1 = ",
    ". Also haben wir 10 Einer bekommen und rechnen ",
    " + 10 = ",
    "."
  ]
}


analogyTextIndex


correct
analogySubPanelVisibility
styling = [0,0,0]

crossHunderter
crossZehner
crossEiner

corHunderter
corZehner
corEiner

resHunderter
resZehner
resEiner


var text = '{ "employees" : [' +
  '{ "firstName":"John" , "lastName":"Doe" },' +
  '{ "firstName":"Anna" , "lastName":"Smith" },' +
  '{ "firstName":"Peter" , "lastName":"Jones" } ]}'; 

  var obj = JSON.parse(text);

  var obj = {
    Name  : f_name,
    Phone : phone_number
}

var json = JSON.stringify(obj);

beginning={this.beginningAnalogy ? true : false}
            end={this.endAnalogy ? true : false}
            sub={String(this.analogy.sub).replace(/,/g, '')}
            min={String(this.analogy.min).replace(/,/g, '')}
            res={this.curAnalogyResult}
            cor={this.curAnalogyCorrection}
            min_cor={this.curAnalogyMinuendCor}
            highlighting={this.styling}
            subpanel_visibility={this.analogySubPanelVisibility}
            close_func={this.hideAnalogyPanel}